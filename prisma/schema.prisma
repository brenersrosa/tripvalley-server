// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  packagesAccommodations Order[]

  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User[]

  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, permissionId])
  @@map("rolesPermissions")
}

model Itinerary {
  id                 String  @id @default(uuid())
  isActive           Boolean
  name               String
  numberOfDays       Int
  description        String
  valuePerPerson     Decimal
  content            Json
  classification     Json
  transferParticular Boolean
  transferExclusive  Boolean
  transferShared     Boolean

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  packages ItinerariesOnPackages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("itineraries")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  itinerary Itinerary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Accommodation {
  id                String  @id @default(uuid())
  isActive          Boolean
  name              String
  dailyValue        Decimal
  imagePath         String
  zipCode           String
  addressName       String
  districtName      String
  addressNumber     String
  city              String
  singleRoom        Boolean
  doubleRoom        Boolean
  doubleBedroom     Boolean
  dormRoom          Boolean
  breakfast         Boolean
  lunch             Boolean
  dinner            Boolean
  wifi              Boolean
  petFriendly       Boolean
  parking           Boolean
  gyn               Boolean
  pool              Boolean
  onSiteRestaurants Boolean
  nearbyRestaurants Boolean
  roomService       Boolean
  transportService  Boolean
  childrensArea     Boolean

  packages AccommodationsOnPackages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accommodations")
}

model Package {
  id   String @id @default(uuid())
  name String

  itineraries    ItinerariesOnPackages[]
  accommodations AccommodationsOnPackages[]

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("packages")
}

model ItinerariesOnPackages {
  id String @id @default(uuid())

  itineraryId String
  packageId   String

  itinerary Itinerary @relation(fields: [itineraryId], references: [id])
  package   Package   @relation(fields: [packageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itineraryId, packageId])
  @@map("itinerariesOnPackages")
}

model AccommodationsOnPackages {
  id String @id @default(uuid())

  accommodationId String
  packageId       String

  accommodation Accommodation @relation(fields: [accommodationId], references: [id])
  package       Package       @relation(fields: [packageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([accommodationId, packageId])
  @@map("accommodationsOnPackages")
}

model Member {
  id       String @id @default(uuid())
  name     String
  document String
  age      String

  order MemberPerOrder[]

  @@map("members")
}

model Order {
  id         String  @id @default(uuid())
  totalValue Decimal

  userId    String
  packageId String

  user    User    @relation(fields: [userId], references: [id])
  package Package @relation(fields: [packageId], references: [id])

  member MemberPerOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, packageId])
  @@map("orders")
}

model MemberPerOrder {
  id String @id @default(uuid())

  memberId String
  orderId  String

  member Member @relation(fields: [memberId], references: [id])
  order  Order  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, orderId])
  @@map("memberPerOrder")
}
