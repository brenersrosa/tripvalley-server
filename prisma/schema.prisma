// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  packagesAccommodations Order[]

  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User[]

  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, permissionId])
  @@map("rolesPermissions")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  itinerary Itinerary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

enum Status {
  active
  inactive
}

model Itinerary {
  id             String  @id @default(uuid())
  isActive       Status
  name           String
  numberOfDays   Int
  description    String
  valuePerPerson Decimal
  content        Json
  classification Json

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  accommodationId String
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])

  packages ItinerariesOnPackages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("itineraries")
}

model Accommodation {
  id                String  @id @default(uuid())
  isActive          Status
  name              String
  dailyValue        Decimal
  imagePath         String
  zipCode           String
  addressName       String
  districtName      String
  addressNumber     String
  city              String
  singleRoom        Boolean
  doubleRoom        Boolean
  doubleBedroom     Boolean
  dormRoom          Boolean
  breakfast         Boolean
  lunch             Boolean
  dinner            Boolean
  wifi              Boolean
  petFriendly       Boolean
  parking           Boolean
  gyn               Boolean
  pool              Boolean
  onSiteRestaurants Boolean
  nearbyRestaurants Boolean
  roomService       Boolean
  transportService  Boolean
  childrensArea     Boolean

  itineraries Itinerary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accommodations")
}

model Package {
  id                 String  @id @default(uuid())
  isActive           Status
  name               String
  transferParticular Boolean
  transferExclusive  Boolean
  transferShared     Boolean

  itineraries ItinerariesOnPackages[]

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("packages")
}

model ItinerariesOnPackages {
  id String @id @default(uuid())

  itineraryId String
  packageId   String

  itinerary Itinerary @relation(fields: [itineraryId], references: [id])
  package   Package   @relation(fields: [packageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itineraryId, packageId])
  @@map("itinerariesOnPackages")
}

enum OrderStatus {
  awaiting
  refused
  accept
  canceled
}

model Order {
  id         String      @id @default(uuid())
  status     OrderStatus
  totalValue Decimal
  companions Json

  userId    String
  packageId String

  user    User    @relation(fields: [userId], references: [id])
  package Package @relation(fields: [packageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, packageId])
  @@map("orders")
}
